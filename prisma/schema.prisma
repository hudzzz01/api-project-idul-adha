// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @unique @default(autoincrement())
  uuid        String   @id
  nama        String
  phone       String
  email       String   @unique
  address     String
  password    String
  img         String
  role        String
  masjid      Masjid   @relation(fields: [uuid_masjid], references: [uuid], onDelete: Cascade)
  uuid_masjid String
  Tokens      Tokens[]
}

model Masjid {
  id         Int        @unique @default(autoincrement())
  uuid       String     @id @unique
  nama       String
  alamat     String
  kode_post  String
  organisasi String
  phone      String
  img        String
  User       User[]
  Jamaah     Jamaah[]
  Penerima   Penerima[]
}

model Penerima {
  id            Int      @unique @default(autoincrement())
  uuid          String   @id
  tipe_token    String
  nama_penerima String
  masjid        Masjid   @relation(fields: [uuid_masjid], references: [uuid], onDelete: Cascade)
  uuid_masjid   String
  token         Tokens[]
}

model Tokens {
  id                    Int       @unique @default(autoincrement())
  uuid                  String    @id
  create_at             DateTime  @default(now())
  verified_at           DateTime? @updatedAt
  foto_penerima         String?
  is_verif              String?
  nomor_kupon           String?   @unique
  isi_token             String
  user                  User?     @relation(fields: [verified_by_uuid_user], references: [uuid])
  verified_by_uuid_user String?
  penerima              Penerima? @relation(fields: [uuid_penerima], references: [uuid])
  uuid_penerima         String?
}

model Jamaah {
  id                  Int      @unique @default(autoincrement())
  uuid                String   @id
  nama                String
  alamat              String?
  no_telepon          String?
  foto                String?
  bin                 String?
  binti               String?
  jabatan_di_keluarga String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  masjid              Masjid   @relation(fields: [uuid_masjid], references: [uuid], onDelete: Cascade)
  uuid_masjid         String
  family              Family   @relation(fields: [uuid_family], references: [uuid], onDelete: Cascade)
  uuid_family         String
  fidyah              Fidyah[]
}

model Family {
  id                   Int       @unique @default(autoincrement())
  uuid                 String    @id
  nama_kepala_keluarga String
  tempat_lahir         String?
  tanggal_lahir        String
  alamat               String?
  kelurahan            String?
  kecamatan            String?
  kota_atau_kabupaten  String?
  no_hp_wa             String?
  no_hp_alternatif     String?
  email                String?
  Jamaah               Jamaah[]
  Zakat                Zakat[]
  Sodakoh              Sodakoh[]
  Fidyah               Fidyah[]
}

model Zakat {
  id           Int      @unique @default(autoincrement())
  uuid         String   @id
  jumlah_zakat Int
  tahun        Int?
  create_at    DateTime @default(now())
  tim          String?
  family       Family   @relation(fields: [uuid_family], references: [uuid], onDelete: Cascade)
  uuid_family  String
}

model Fidyah {
  id            Int      @unique @default(autoincrement())
  uuid          String   @id
  jumlah_fidyah Int
  tahun         Int?
  create_at     DateTime @default(now())
  family        Family   @relation(fields: [uuid_family], references: [uuid], onDelete: Cascade)
  uuid_family   String
  jamaah        Jamaah   @relation(fields: [uuid_jamaah], references: [uuid], onDelete: Cascade)
  uuid_jamaah   String
  tim           String?
}

model Sodakoh {
  id             Int      @unique @default(autoincrement())
  uuid           String   @id
  jumlah_sodakoh Int
  tahun          Int?
  create_at      DateTime @default(now())
  family         Family   @relation(fields: [uuid_family], references: [uuid], onDelete: Cascade)
  uuid_family    String
}
